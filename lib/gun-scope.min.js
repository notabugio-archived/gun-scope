!function(n,e){"object"==typeof exports&&"object"==typeof module?module.exports=e(require("ramda"),require("zalgo-promise")):"function"==typeof define&&define.amd?define("gun-scope",["ramda","zalgo-promise"],e):"object"==typeof exports?exports["gun-scope"]=e(require("ramda"),require("zalgo-promise")):n["gun-scope"]=e(n.ramda,n["zalgo-promise"])}("undefined"!=typeof self?self:this,function(n,e){return function(n){var e={};function r(t){if(e[t])return e[t].exports;var o=e[t]={i:t,l:!1,exports:{}};return n[t].call(o.exports,o,o.exports,r),o.l=!0,o.exports}return r.m=n,r.c=e,r.d=function(n,e,t){r.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:t})},r.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},r.t=function(n,e){if(1&e&&(n=r(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var t=Object.create(null);if(r.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var o in n)r.d(t,o,function(e){return n[e]}.bind(null,o));return t},r.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return r.d(e,"a",e),e},r.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},r.p="",r(r.s=0)}([function(n,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.query=e.scope=e.now=e.nowOr=e.resolve=e.all=e.Promise=void 0;var t=r(1),o=r(2);function u(n,e){return function(n){if(Array.isArray(n))return n}(n)||function(n,e){var r=[],t=!0,o=!1,u=void 0;try{for(var i,c=n[Symbol.iterator]();!(t=(i=c.next()).done)&&(r.push(i.value),!e||r.length!==e);t=!0);}catch(n){o=!0,u=n}finally{try{t||null==c.return||c.return()}finally{if(o)throw u}}return r}(n,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function i(n){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n})(n)}var c=o.ZalgoPromise;e.Promise=c;var a=o.ZalgoPromise.all,f=o.ZalgoPromise.resolve;e.resolve=f,e.all=a;var l=function(n){return Object.keys(n||{}).filter(function(n){return n&&"_"!==n&&"#"!==n})},p=(0,t.curry)(function(n,e){var r,t;return e.then(function(n){t=!0,r=n}),t?r:n});e.nowOr=p;var s=p(void 0);e.now=s;var y=function n(e,r){var u,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;if(!r||r===[])throw new Error("bad key ".concat(r));var c={},a=function(n){return(i?function(n,e,r){return r.then(function(r){var o=(0,t.path)([e,"#"],r),u=(0,t.prop)(e,r);return o?n.get(o).then():u})}:function(n,e){return new o.ZalgoPromise(function(r,t){var o=n.known(e);void 0!==o&&r(o),n.fetch(e).then(function(){return n.known(e)}).then(r).catch(t)})})(e,r,i).then(n||t.identity)},f=function(n){return a(l).then(n||t.identity)};return u={get:function(r){return c[r]||(c[r]=n(e,r,u))},then:a,keys:f,souls:f,count:function(n){return f(t.length).then(n||t.identity)}}};e.scope=function(n){var e,r=n.graph,c=void 0===r?{}:r,a=n.gun,l=n.parentScope,s=n.timeout,d=void 0===s?1e4:s,v=n.cache,h=void 0===v?null:v,g=n.getter,m=n.noGun,b=void 0!==m&&m,w=n.isCacheing,P=void 0!==w&&w,S=n.isCached,j=void 0!==S&&S,O=n.onlyCache,x=void 0!==O&&O,_=[],q={},k={},A={...h||{}},C={},E={...c},M=function(n,e){var r=E[n],o=r;return e&&(o=r?(0,t.mergeDeepRight)(r||{},e):e),E[n]=o||E[n]||null,_.forEach(function(e){return e(n,o)}),o},Q=function(n){for(var e=arguments.length,r=new Array(e>1?e-1:0),o=1;o<e;o++)r[o-1]=arguments[o];var u=[n].concat(r).map(function(n){return"object"===i(n)?JSON.stringify(n):"".concat(n)});return[(0,t.path)(u,A),u]},T=function(n,r){for(var o=arguments.length,i=new Array(o>2?o-2:0),c=2;c<o;c++)i[c-2]=arguments[c];if(l)return l.cacheQuery.apply(l,[n,r].concat(i));var a=u(Q.apply(void 0,[n].concat(i)),2),p=a[0],s=a[1];return x?f(p):r.apply(void 0,[e].concat(i)).then(function(n){return P&&(A=(0,t.assocPath)(s,n,A)),q=(0,t.dissocPath)(t.path,q),n})};return e={on:function(n){return _.push(n)},off:function(n){return _=_.filter(function(e){return e!==n})},get:function(n){return C[n]||(C[n]=y(e,n))},getCache:function(){return A},known:function(n){return l?l.known(n):E[n]},fetch:function(n){return l?l.fetch(n):k[n]=k[n]||new o.ZalgoPromise(function(e){var r;if(!a)return e(null);var t=function(t){clearTimeout(r),e(M(n,t))};if(r=setTimeout(function(){n in E||(console.log("slow query",n),t(null))},d),"string"!=typeof n)throw new Error("bad SOUL ".concat(n));g&&g(n).then(t),b||a.get(n).on(t)})},cacheQuery:T,cachedQuery:function(n,e){for(var r=arguments.length,t=new Array(r>2?r-2:0),o=2;o<r;o++)t[o-2]=arguments[o];if(l)return l.cachedQuery.apply(l,[n,e].concat(t));var i=u(Q.apply(void 0,[n].concat(t)),1)[0],c=T.apply(void 0,[n,e].concat(t));return j&&i?f(p(i,c)):c},parentScope:l,getGraph:function(){return E},getAccesses:function(){return C},load:M,loadCachedResults:function(n){A=(0,t.mergeDeepRight)(A,n),_.forEach(function(n){return n()})}}};e.query=function(n){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,r=function(r){for(var t=arguments.length,o=new Array(t>1?t-1:0),u=1;u<t;u++)o[u-1]=arguments[u];return r.cachedQuery.apply(r,[e,n].concat(o))},o=e?r:n,u=e?r:n;return u.query=n,u.cached=o,u.now=(0,t.compose)(s,o),u}},function(e,r){e.exports=n},function(n,r){n.exports=e}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
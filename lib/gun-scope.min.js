!function(e,n){"object"==typeof exports&&"object"==typeof module?module.exports=n(require("ramda"),require("zalgo-promise")):"function"==typeof define&&define.amd?define("gun-scope",["ramda","zalgo-promise"],n):"object"==typeof exports?exports["gun-scope"]=n(require("ramda"),require("zalgo-promise")):e["gun-scope"]=n(e.ramda,e["zalgo-promise"])}("undefined"!=typeof self?self:this,function(e,n){return function(e){var n={};function t(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,t),o.l=!0,o.exports}return t.m=e,t.c=n,t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:r})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,n){if(1&n&&(e=t(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(t.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var o in e)t.d(r,o,function(n){return e[n]}.bind(null,o));return r},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},t.p="",t(t.s=0)}([function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.query=n.scope=n.now=n.nowOr=n.resolve=n.all=n.Promise=void 0;var r=t(1),o=t(2);function u(e){return(u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var i=o.ZalgoPromise;n.Promise=i;var c=o.ZalgoPromise.all,f=o.ZalgoPromise.resolve;n.resolve=f,n.all=c;var a=function(e){return Object.keys(e||{}).filter(function(e){return e&&"_"!==e&&"#"!==e})},l=(0,r.curry)(function(e,n){var t,r;return n.then(function(e){r=!0,t=e}),r?t:e});n.nowOr=l;var p=l(void 0);n.now=p;var s=function e(n,t){var u,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;if(!t||t===[])throw new Error("bad key ".concat(t));var c={},f=function(e){return(i?function(e,n,t){return t.then(function(t){var o=(0,r.path)([n,"#"],t),u=(0,r.prop)(n,t);return o?e.get(o).then():u})}:function(e,n){return new o.ZalgoPromise(function(t,r){var o=e.known(n);void 0!==o&&t(o),e.fetch(n).then(function(){return e.known(n)}).then(t).catch(r)})})(n,t,i).then(e||r.identity)},l=function(e){return f(a).then(e||r.identity)};return u={get:function(t){return c[t]||(c[t]=e(n,t,u))},then:f,keys:l,souls:l,count:function(e){return l(r.length).then(e||r.identity)}}};n.scope=function(e){var n,t=e.graph,i=void 0===t?{}:t,c=e.gun,a=e.parentScope,p=e.timeout,d=void 0===p?1e4:p,y=e.cache,h=void 0===y?null:y,v=e.getter,g=e.noGun,m=void 0!==g&&g,b=e.isCacheing,w=void 0!==b&&b,P=e.isCached,S=void 0!==P&&P,j=e.onlyCache,O=void 0!==j&&j,x=[],_={},q={},k={...h||{}},C={},M={...i},Z=function(e,n){var t=M[e],o=t;return n&&(o=t?(0,r.mergeDeepRight)(t||{},n):n),M[e]=o||M[e]||null,x.forEach(function(n){return n(e,o)}),o};return n={on:function(e){return x.push(e)},off:function(e){return x=x.filter(function(n){return n!==e})},get:function(e){return C[e]||(C[e]=s(n,e))},getCache:function(){return k},known:function(e){return a?a.known(e):M[e]},fetch:function(e){return a?a.fetch(e):q[e]=q[e]||new o.ZalgoPromise(function(n){var t;if(!c)return n(null);var r=function(r){clearTimeout(t),n(Z(e,r))};if(t=setTimeout(function(){e in M||(console.log("slow query",e),r(null))},d),"string"!=typeof e)throw new Error("bad SOUL ".concat(e));v&&v(e).then(r),m||c.get(e).on(r)})},cachedQuery:function(e,t){for(var o=arguments.length,i=new Array(o>2?o-2:0),c=2;c<o;c++)i[c-2]=arguments[c];if(a)return a.cachedQuery.apply(a,[e,t].concat(i));var p=[e].concat(i).map(function(e){return"object"===u(e)?JSON.stringify(e):"".concat(e)}),s=(0,r.path)(p,k);if(O)return f(s);var d=t.apply(void 0,[n].concat(i)).then(function(e){return(w||S)&&(k=(0,r.assocPath)(p,e,k)),_=(0,r.dissocPath)(r.path,_),e});return s?f(l(s,d)):d},parentScope:a,getGraph:function(){return M},getAccesses:function(){return C},load:Z,loadCachedResults:function(e){k=(0,r.mergeDeepRight)(k,e),x.forEach(function(e){return e()})}}};n.query=function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,t=n?function(t){for(var r=arguments.length,o=new Array(r>1?r-1:0),u=1;u<r;u++)o[u-1]=arguments[u];return t.cachedQuery.apply(t,[n,e].concat(o))}:e,o=t;return o.query=e,o.cached=t,o.now=(0,r.compose)(p,t),o}},function(n,t){n.exports=e},function(e,t){e.exports=n}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
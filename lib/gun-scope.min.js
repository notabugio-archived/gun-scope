!function(n,e){"object"==typeof exports&&"object"==typeof module?module.exports=e(require("ramda"),require("zalgo-promise")):"function"==typeof define&&define.amd?define("gun-scope",["ramda","zalgo-promise"],e):"object"==typeof exports?exports["gun-scope"]=e(require("ramda"),require("zalgo-promise")):n["gun-scope"]=e(n.ramda,n["zalgo-promise"])}("undefined"!=typeof self?self:this,function(n,e){return function(n){var e={};function t(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return n[r].call(o.exports,o,o.exports,t),o.l=!0,o.exports}return t.m=n,t.c=e,t.d=function(n,e,r){t.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:r})},t.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},t.t=function(n,e){if(1&e&&(n=t(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var r=Object.create(null);if(t.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var o in n)t.d(r,o,function(e){return n[e]}.bind(null,o));return r},t.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return t.d(e,"a",e),e},t.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},t.p="",t(t.s=0)}([function(n,e,t){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.query=e.scope=e.now=e.nowOr=e.resolve=e.all=e.Promise=void 0;var r=t(1),o=t(2);function u(n,e){return function(n){if(Array.isArray(n))return n}(n)||function(n,e){var t=[],r=!0,o=!1,u=void 0;try{for(var i,c=n[Symbol.iterator]();!(r=(i=c.next()).done)&&(t.push(i.value),!e||t.length!==e);r=!0);}catch(n){o=!0,u=n}finally{try{r||null==c.return||c.return()}finally{if(o)throw u}}return t}(n,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function i(n){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n})(n)}var c=o.ZalgoPromise;e.Promise=c;var a=o.ZalgoPromise.all,f=o.ZalgoPromise.resolve;e.resolve=f,e.all=a;var l=function(n){return Object.keys(n||{}).filter(function(n){return n&&"_"!==n&&"#"!==n})},p=(0,r.curry)(function(n,e){var t,r;return e.then(function(n){r=!0,t=n}),r?t:n});e.nowOr=p;var s=p(void 0);e.now=s;var y=function n(e,t){var u,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;if(!t||t===[])throw new Error("bad key ".concat(t));var c={},a=function(n){return(i?function(n,e,t){return t.then(function(t){var o=(0,r.path)([e,"#"],t),u=(0,r.prop)(e,t);return o?n.get(o).then():u})}:function(n,e){return new o.ZalgoPromise(function(t,r){var o=n.known(e);void 0!==o&&t(o),n.fetch(e).then(function(){return n.known(e)}).then(t).catch(r)})})(e,t,i).then(n||r.identity)},f=function(n){return a(l).then(n||r.identity)};return u={get:function(t){return c[t]||(c[t]=n(e,t,u))},then:a,keys:f,souls:f,count:function(n){return f(r.length).then(n||r.identity)}}};e.scope=function(n){var e,t=n.graph,c=void 0===t?{}:t,a=n.gun,l=n.parentScope,s=n.timeout,d=void 0===s?1e4:s,v=n.cache,h=void 0===v?null:v,g=n.getter,m=n.noGun,b=void 0!==m&&m,w=n.isCacheing,P=void 0!==w&&w,S=n.isCached,j=void 0!==S&&S,O=n.onlyCache,x=void 0!==O&&O,q=[],_={},k={},A={...h||{}},C={},E={...c},M=function(n,e){var t=E[n],o=t;return e&&(o=(0,r.mergeDeepRight)(t||{},e)),E[n]=o||E[n]||null,(0,r.equals)(t,o)||q.forEach(function(e){return e(n,o)}),o},Q=function(n){for(var e=arguments.length,t=new Array(e>1?e-1:0),o=1;o<e;o++)t[o-1]=arguments[o];var u=[n].concat(t).map(function(n){return"object"===i(n)?JSON.stringify(n):"".concat(n)});return[(0,r.path)(u,A),u]},T=function(n,t){for(var o=arguments.length,i=new Array(o>2?o-2:0),c=2;c<o;c++)i[c-2]=arguments[c];if(l)return l.cacheQuery.apply(l,[n,t].concat(i));var a=u(Q.apply(void 0,[n].concat(i)),2),p=a[0],s=a[1];return x?f(p):t.apply(void 0,[e].concat(i)).then(function(n){return A=P?(0,r.assocPath)(s,n,A):(0,r.dissocPath)(s,A),_=(0,r.dissocPath)(r.path,_),n})};return e={on:function(n){return q.push(n)},off:function(n){return q=q.filter(function(e){return e!==n})},get:function(n){return C[n]||(C[n]=y(e,n))},getCache:function(){return A},known:function(n){return l?l.known(n):E[n]},fetch:function(n){return l?l.fetch(n):k[n]=k[n]||new o.ZalgoPromise(function(e){var t;if(!a)return e(null);var r=function(r){clearTimeout(t),e(M(n,r))};if(t=setTimeout(function(){n in E||(console.log("slow query",n),r(null))},d),"string"!=typeof n)throw new Error("bad SOUL ".concat(n));if(g&&g(n).then(r),!b){var o=a.get(n);o.on(r),o.not&&o.not(function(){return r(null)})}})},cacheQuery:T,cachedQuery:function(n,e){for(var t=arguments.length,r=new Array(t>2?t-2:0),o=2;o<t;o++)r[o-2]=arguments[o];if(l)return l.cachedQuery.apply(l,[n,e].concat(r));var i=u(Q.apply(void 0,[n].concat(r)),1)[0],c=T.apply(void 0,[n,e].concat(r));return j&&i?f(p(i,c)):c},parentScope:l,getGraph:function(){return E},getAccesses:function(){return C},load:M,loadCachedResults:function(n){A=(0,r.mergeDeepRight)(A,n),q.forEach(function(n){return n()})}}};e.query=function(n){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,t=function(t){for(var r=arguments.length,o=new Array(r>1?r-1:0),u=1;u<r;u++)o[u-1]=arguments[u];return t.cachedQuery.apply(t,[e,n].concat(o))},o=e?t:n,u=e?t:n;return u.query=n,u.cached=o,u.now=(0,r.compose)(s,o),u}},function(e,t){e.exports=n},function(n,t){n.exports=e}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
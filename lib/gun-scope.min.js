!function(e,n){"object"==typeof exports&&"object"==typeof module?module.exports=n(require("ramda"),require("zalgo-promise")):"function"==typeof define&&define.amd?define("gun-scope",["ramda","zalgo-promise"],n):"object"==typeof exports?exports["gun-scope"]=n(require("ramda"),require("zalgo-promise")):e["gun-scope"]=n(e.ramda,e["zalgo-promise"])}("undefined"!=typeof self?self:this,function(e,n){return function(e){var n={};function t(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,t),o.l=!0,o.exports}return t.m=e,t.c=n,t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:r})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,n){if(1&n&&(e=t(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(t.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var o in e)t.d(r,o,function(n){return e[n]}.bind(null,o));return r},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},t.p="",t(t.s=0)}([function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.query=n.scope=n.now=n.nowOr=n.resolve=n.all=n.Promise=void 0;var r=t(1),o=t(2);function u(e){return(u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var i=o.ZalgoPromise;n.Promise=i;var c=o.ZalgoPromise.all,f=o.ZalgoPromise.resolve;n.resolve=f,n.all=c;var a=function(e){return Object.keys(e||{}).filter(function(e){return e&&"_"!==e&&"#"!==e})},l=(0,r.curry)(function(e,n){var t,r;return n.then(function(e){r=!0,t=e}),r?t:e});n.nowOr=l;var s=l(void 0);n.now=s;var p=function e(n,t){var u,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;if(!t||t===[])throw new Error("bad key ".concat(t));var c={},f=function(e){return(i?function(e,n,t){return t.then(function(t){var o=(0,r.path)([n,"#"],t),u=(0,r.prop)(n,t);return o?e.get(o).then():u})}:function(e,n){return new o.ZalgoPromise(function(t,r){var o=e.known(n);void 0!==o&&t(o),e.fetch(n).then(function(){return e.known(n)}).then(t).catch(r)})})(n,t,i).then(e||r.identity)},l=function(e){return f(a).then(e||r.identity)};return u={get:function(t){return c[t]||(c[t]=e(n,t,u))},then:f,keys:l,souls:l,count:function(e){return l(r.length).then(e||r.identity)}}};n.scope=function(e){var n,t=e.graph,i=void 0===t?{}:t,c=e.gun,a=e.parentScope,s=e.timeout,d=void 0===s?1e4:s,y=e.cache,h=void 0===y?null:y,v=e.getter,g=e.noGun,m=void 0!==g&&g,b=e.isCacheing,w=void 0!==b&&b,P=e.isCached,j=void 0!==P&&P,O=e.onlyCache,S=void 0!==O&&O,x=[],_={},q={},k={...h||{}},C={},M={...i};return n={on:function(e){return x.push(e)},off:function(e){return x=x.filter(function(n){return n!==e})},get:function(e){return C[e]||(C[e]=p(n,e))},getCache:function(){return k},known:function(e){return a?a.known(e):M[e]},fetch:function(e){return q[e]=q[e]||new o.ZalgoPromise(function(n){var t;if(a)return a.fetch(e);if(!c)return n(null);var o=function(o){clearTimeout(t);var u=M[e],i=u;null===o?i=null:o&&(i=u?(0,r.mergeDeepRight)(u||{},o):o),n(M[e]=i),x.forEach(function(n){return n(e,o)})};if(t=setTimeout(function(){e in M||(console.log("slow query",e),o(null))},d),"string"!=typeof e)throw new Error("bad SOUL ".concat(e));v&&v(e).then(o),m||c.get(e).on(o)})},cachedQuery:function(e,t){for(var o=arguments.length,i=new Array(o>2?o-2:0),c=2;c<o;c++)i[c-2]=arguments[c];if(a)return a.cachedQuery.apply(a,[e,t].concat(i));var s=[e].concat(i).map(function(e){return"object"===u(e)?JSON.stringify(e):"".concat(e)}),p=(0,r.path)(s,k);if(S)return f(p);var d=t.apply(void 0,[n].concat(i)).then(function(e){return(w||j)&&(k=(0,r.assocPath)(s,e,k)),_=(0,r.dissocPath)(r.path,_),e});return p?f(l(p,d)):d},getGraph:function(){return M},getAccesses:function(){return C},loadCachedResults:function(e){k=(0,r.mergeDeepRight)(k,e),x.forEach(function(e){return e()})}}};n.query=function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,t=n?function(t){for(var r=arguments.length,o=new Array(r>1?r-1:0),u=1;u<r;u++)o[u-1]=arguments[u];return t.cachedQuery.apply(t,[n,e].concat(o))}:e,o=t;return o.query=e,o.cached=t,o.now=(0,r.compose)(s,t),o}},function(n,t){n.exports=e},function(e,t){e.exports=n}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,